#!/usr/bin/env python2.7
"""
lsync - cLoud Sync
"""

import sys
import os
import subprocess
import yaml
from optparse import OptionParser
import time
import datetime

import lsync
import lsync.repository
import lsync.storage

#dateutil (3rdparty)
import dateutil.parser
import dateutil.tz

# import boto (3rdparty)
from boto.s3.connection import S3Connection
import boto
import boto.utils

APPID="lsync"

"""
The intent behind this commandline application is to provide similar syncronization behaviour to 
that of DropBox with the exception that you are not limited to a single file repository. You can 
set up multiple local repositories (analogous to git repositories) and have each of those sync to 
the same, or to different remote S3 buckets.

Example usage:
NOTE: You have to run cmdline lsync from within a local repo

Sync the full repo
$ lsync sync

Sync files recursively starting from the current directory
$ lsync sync .

Sync a list of files
$ lsync sync foo1 foo2 foo3 [...]

The above sync behaviour applies to 'push' and 'pull' actions too
Pull changes from the remote to the local repository
$ lsync pull 

Push changes from the local to the remote repository
$ lsync push

"""

###################################################################################################

def sync_action(argv):
	"""
	Sync the local repository with the remote bucket
	"""
	usage = "usage: %prog sync" # [path]"
	parser = OptionParser(usage);
	parser.add_option("-r", "--repo", dest="repo", default=".", help="Path to repository", metavar="PATH")
	options, args = parser.parse_args(argv);

	if len(args) not in [0,1]:
		parser.error("Incorrect number of arguments");

	sync_path = None
	if len(args) == 1:
		sync_path = args[0]

	repo_path = options.repo

	repo = lsync.repository.Repository(repo_path)
	print "Repository: ", repo.get_root()
	bucket = lsync.storage.Bucket( repo.get_bucket_name() )
	
	lsync.sync_files(repo, bucket)

###################################################################################################

def pull_action(argv):
	"""
	Pull all bucket files from the server
	"""
	usage = "usage: %prog pull" # [path]"
	parser = OptionParser(usage);
	parser.add_option("-r", "--repo", dest="repo", default=".", help="Path to repository", metavar="PATH")
	options, args = parser.parse_args(argv);

	if len(args) not in [0,1]:
		parser.error("Incorrect number of arguments");

	sync_path = None
	if len(args) == 1:
		sync_path = args[0]

	repo_path = options.repo

	repo = lsync.repository.Repository(repo_path)
	print "Repository: ", repo.get_root()
	bucket = lsync.storage.Bucket( repo.get_bucket_name() )
	
	lsync.pull_files(repo, bucket)

###################################################################################################

def push_action(argv):
	"""
	Push local files to the bucket on the server
	"""
	usage = "usage: %prog push [repo_path]" # [path]"
	parser = OptionParser(usage);
	parser.add_option("-r", "--repo", dest="repo", default=".", help="Path to repository", metavar="PATH")
	options, args = parser.parse_args(argv);

	if len(args) not in [0,1]:
		parser.error("Incorrect number of arguments");

	sync_path = None
	if len(args) == 1:
		sync_path = args[0]

	repo_path = options.repo

	repo = lsync.repository.Repository(repo_path)
	print "Repository: ", repo.get_root()
	bucket = lsync.storage.Bucket( repo.get_bucket_name() )
	
	# _pull_files(gs, bcache)
	lsync.push_files(repo, bucket)

###################################################################################################

def init_action(argv):
	"""
	Initialise a repo for lsync, and create the respective bucket on BucketStore
	"""
	usage = "usage: %prog init bucket_name repo_path"
	# TODO: Change usage to:
	# usage = "usage: %prog push bucket_name [path]" < -- required 'lsync init' command to be implemented
	parser = OptionParser(usage);
	parser.add_option("-w", "--overwrite", dest="overwrite", \
		action="store_true", default=False, help="overwrite existing repo config", metavar="FILE")
	options, args = parser.parse_args(argv);

	if len(args) != 2:
		parser.error("Incorrect number of arguments");

	
	bucket_name = args[0]
	repo_path = args[1]

	lsync.repository.create_repository(repo_path, bucket_name, overwrite=options.overwrite)

###################################################################################################

action_dict = {}
action_dict["init"] = init_action
action_dict["pull"] = pull_action
action_dict["push"] = push_action
action_dict["sync"] = sync_action

# action_dict["rm"] = rm_action
# action_dict["sync"] = sync_action

# action_dict["push"] = push_action
# action_dict["upload"] = upload_action
# action_dict["download"] = download_action

# action_dict["test"] = test_action

def usage():
	print( "Available actions: ")
	for action in action_dict:
		print(" - %s" % action)

def main():
	if len(sys.argv) < 2:
		usage()
		return 1;

	action_str = sys.argv[1]
	action = action_dict.get(action_str)
	if action:
		action(sys.argv[2:])
	else:
		usage()
		return 1


	return 0;

if __name__ == "__main__":
	sys.exit(main())
